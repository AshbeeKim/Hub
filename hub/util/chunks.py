from uuid import UUID, uuid4
from hub.constants import ENCODING_DTYPE, UUID_SHIFT_AMOUNT


def _cast_to_encoding_dtype(uuid: UUID) -> ENCODING_DTYPE:
    return ENCODING_DTYPE(uuid.int >> UUID_SHIFT_AMOUNT)


def random_chunk_id() -> ENCODING_DTYPE:
    return _cast_to_encoding_dtype(uuid4())


def chunk_uuid_from_id(id: ENCODING_DTYPE) -> UUID:
    chunk_name = chunk_name_from_id(id)
    padded_chunk_name = chunk_name + ("0" * 24)
    return UUID(hex=padded_chunk_name)


def chunk_name_from_id(id: ENCODING_DTYPE) -> str:
    """Returns the hex of `id` with the "0x" prefix removed. This is the chunk's name and should be used to determine the chunk's key.
    Can convert back into `id` using `chunk_id_from_name`."""

    return hex(id)[2:]


def chunk_id_from_name(name: str) -> ENCODING_DTYPE:
    """Returns the 64-bit integer from the hex `name` generated by `chunk_name_from_id`."""

    return int("0x" + name, 16)
