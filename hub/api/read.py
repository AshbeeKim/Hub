from hub.core.sample import Sample  # type: ignore
from hub.util.storage import storage_provider_from_path, get_storage_and_cache_chain
from hub.constants import DEFAULT_MEMORY_CACHE_SIZE, DEFAULT_LOCAL_CACHE_SIZE

import posixpath


def read(
    path: str,
    verify: bool = False,
    creds=None,
    token=None,
    memory_cache_size: int = DEFAULT_MEMORY_CACHE_SIZE,
    local_cache_size: int = DEFAULT_LOCAL_CACHE_SIZE,
) -> Sample:
    """Utility that reads raw data from a file into a `np.ndarray` in 1 line of code. Also provides access to all important metadata.

    Note:
        No data is actually loaded until you try to get a property of the returned `Sample`. This is useful for passing along to
            `tensor.append` and `tensor.extend`.

    Examples:
        >>> sample = hub.read("path/to/cat.jpeg")
        >>> type(sample.array)
        <class 'numpy.ndarray'>
        >>> sample.compression
        'jpeg'

    Supported file types:
        Image: "bmp", "dib", "gif", "ico", "jpeg", "jpeg2000", "pcx", "png", "ppm", "sgi", "tga", "tiff", "webp", "wmf", "xbm"
        Audio: "flac", "mp3", "wav"

    Args:
        path (str): Path to a supported file.
        verify (bool):  If True, contents of the file are verified.
        creds (dict, optional): A dictionary containing credentials used to access the dataset at the path.
            This takes precedence over credentials present in the environment. Currently only works with s3 paths.
            It supports 'aws_access_key_id', 'aws_secret_access_key', 'aws_session_token', 'endpoint_url' and 'region' as keys.
        token (str, optional): Activeloop token, used for fetching credentials to the dataset at path if it is a Hub dataset. This is optional, tokens are normally autogenerated.
        memory_cache_size (int): The size of the memory cache to be used in MB.
        local_cache_size (int): The size of the local filesystem cache to be used in MB.

    Returns:
        Sample: Sample object. Call `sample.array` to get the `np.ndarray`.
    """
    splt = posixpath.split(path)
    _, storage = get_storage_and_cache_chain(
        splt[0],
        creds=creds,
        read_only=True,
        token=token,
        memory_cache_size=memory_cache_size,
        local_cache_size=local_cache_size,
    )
    sample = Sample(splt[1], verify=verify, storage=storage)
    return sample
